package com.example.sumitkaushik.hbtifacemashdemo1;import android.app.Activity;import android.app.ProgressDialog;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Matrix;import android.graphics.Point;import android.os.AsyncTask;import android.os.Bundle;import android.support.v7.app.AppCompatActivity;import android.view.Display;import android.view.View;import android.view.Window;import android.view.animation.Animation;import android.view.animation.AnimationUtils;import android.widget.Button;import android.widget.ImageView;import android.widget.Toast;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLEncoder;import java.util.concurrent.ExecutionException;public class Game extends Activity {int flag1=0;    int flag2=0;    static String re = null;    ImageView img3, img4;    Button button;    String srno, name, gender;    int width, height;Animation slideup,slidedown,goup,godown;    @Override    public void onBackPressed() {        super.onBackPressed();        Game.re = null;    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        requestWindowFeature(Window.FEATURE_NO_TITLE);        setContentView(R.layout.activity_game);        img3 = (ImageView) findViewById(R.id.imageView3);        img3.setClickable(true);        img4 = (ImageView) findViewById(R.id.imageView4);        img4.setClickable(true);        Display display = getWindowManager().getDefaultDisplay();        Point size = new Point();        display.getSize(size);        width = size.x;        height = size.y;        Bundle bundle = getIntent().getExtras();        String temp = bundle.getString("info");        String[] t = temp.split(",");        gender = t[0];        name = t[1];        srno = t[2];//initialising animations        slideup= AnimationUtils.loadAnimation(getApplicationContext(),R.anim.slideup);        slidedown= AnimationUtils.loadAnimation(getApplicationContext(),R.anim.slidedown);        godown= AnimationUtils.loadAnimation(getApplicationContext(),R.anim.godown);        goup= AnimationUtils.loadAnimation(getApplicationContext(),R.anim.goup);        try {            getMaxId();            // Toast.makeText(Game.this, Game.re, Toast.LENGTH_SHORT).show();        } catch (ExecutionException | InterruptedException e) {            e.printStackTrace();        }        img3.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {img3.startAnimation(godown);img4.startAnimation(goup);                goup.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        img3.setClickable(false);                        img4.setClickable(false);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                       img3.setVisibility(View.INVISIBLE);                        img4.setVisibility(View.INVISIBLE);                        try {                            String te = Game.re;                            String temp[] = te.split(",");                            int i = Integer.parseInt(temp[0]);                            updateScore(i);                            getMaxId();                            //Toast.makeText(getBaseContext(),Game.re,Toast.LENGTH_SHORT).show();                        } catch (ExecutionException e) {                            e.printStackTrace();                        } catch (InterruptedException e) {                            e.printStackTrace();                        }                        img3.setVisibility(View.VISIBLE);                        img4.setVisibility(View.VISIBLE);                        img3.startAnimation(slideup);                        img4.startAnimation(slidedown);                        img3.setClickable(true);                        img4.setClickable(true);                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }        });        img4.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                img3.startAnimation(godown);img4.startAnimation(goup);                goup.setAnimationListener(new Animation.AnimationListener() {                    @Override                    public void onAnimationStart(Animation animation) {                        img3.setClickable(false);                        img4.setClickable(false);                    }                    @Override                    public void onAnimationEnd(Animation animation) {                        img3.setVisibility(View.INVISIBLE);                        img4.setVisibility(View.INVISIBLE);                try {                    String te = Game.re;                    String temp[] = te.split(",");                    int j = Integer.parseInt(temp[1]);                    updateScore(j);                    getMaxId();                } catch (ExecutionException | InterruptedException e) {                    e.printStackTrace();                }                        img3.setVisibility(View.VISIBLE);                        img4.setVisibility(View.VISIBLE);                        img3.startAnimation(slideup);                        img4.startAnimation(slidedown);                        img3.setClickable(true);                        img4.setClickable(true);                    }                    @Override                    public void onAnimationRepeat(Animation animation) {                    }                });            }        });    }    private void updateScore(int i) {        String no = i + "";        class UpdateScore extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String no = strings[0];                String gender = strings[1];                String url = "http://192.168.43.89/phpmyadmin/updateScore.php";                try {                    // Simulate network access.                    URL u = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) u.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("no", "UTF-8") + "=" + URLEncoder.encode(no, "UTF-8") + "&" +                            URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line = "";                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    return response;                } catch (Exception e) {                }                return null;            }        }        UpdateScore updateScore = new UpdateScore();        updateScore.execute(no, gender);    }    private String gameCount(String srno) {        class GameCount extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String srno = strings[0];                String gender = strings[1];                String url = "http://192.168.43.89/phpmyadmin/gameCount.php";                try {                    // Simulate network access.                    URL u = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) u.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("srno", "UTF-8") + "=" + URLEncoder.encode(srno, "UTF-8") + "&" +                            URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line = "";                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    return response;                } catch (Exception e) {                }                return null;            }            @Override            protected void onPostExecute(String s) {                super.onPostExecute(s);            }        }        GameCount gameCount = new GameCount();        String response = null;        try {            response = gameCount.execute(srno, gender).get();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }        return response;    }    private void getMaxId1() throws ExecutionException, InterruptedException {        class GetMaxId1 extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String gender = strings[0];                String url = "http://192.168.43.89/phpmyadmin/getMaxId.php";                try {                    URL add = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) add.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    InputStream inputStream = httpURLConnection.getInputStream();                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line;                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    int number = Integer.parseInt(response);                    int i, j;                    do {                        i = (int) (((1 + Math.random() * 10) % number) + 1);                        j = (int) (((1 + Math.random() * 10) % number) + 1);                    } while (i == j);                    int N1 = cantorFuction(i, j);                    int N2 = cantorFuction(j, i);                    return N1 + "," + N2 + "," + i + "," + j;                } catch (MalformedURLException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                }                return null;            }            @Override            protected void onPostExecute(String s) {                super.onPostExecute(s);                String ar[] = s.split(",");                String N1 = ar[0];                String N2 = ar[1];                String i = ar[2];                String j = ar[3];                saveCantorValue(Integer.parseInt(N1), Integer.parseInt(N2), Integer.parseInt(i), Integer.parseInt(j));            }        }        GetMaxId1 g = new GetMaxId1();        g.execute(gender);    }    private void changeState() {        class ChangeState extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String srno = strings[0];                String url = "http://192.168.43.89/phpmyadmin/changeState.php";                try {                    // Simulate network access.                    URL u = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) u.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("srno", "UTF-8") + "=" + URLEncoder.encode(srno, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    httpURLConnection.disconnect();                } catch (Exception e) {                }                return null;            }        }        ChangeState changeState = new ChangeState();        changeState.execute(srno);    }    private String getMaxId() throws ExecutionException, InterruptedException {        class GetMaxId extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String gender = strings[0];                String url = "http://192.168.43.89/phpmyadmin/getMaxId.php";                try {                    URL add = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) add.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line;                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    int number = Integer.parseInt(response);                    int i, j;                    do {                        i = (int) (((1 + Math.random() * 10) % number) + 1);                        j = (int) (((1 + Math.random() * 10) % number) + 1);                    } while (i == j);                    int N1 = cantorFuction(i, j);                    int N2 = cantorFuction(j, i);                    return N1 + "," + N2 + "," + i + "," + j + "," + number;                } catch (MalformedURLException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                }                return null;            }            @Override            protected void onPostExecute(String s) {                super.onPostExecute(s);                String ar[] = s.split(",");                String N1 = ar[0];                String N2 = ar[1];                String i = ar[2];                String j = ar[3];                String max = ar[4];                String re = checkCantorValue(Integer.parseInt(N1));                if (re.equals("ABSENT")) {                    // Game.re=i+","+j;                    saveCantorValue(Integer.parseInt(N1), Integer.parseInt(N2), Integer.parseInt(i), Integer.parseInt(j));                } else if (re.equals("PRESENT")) {                    try {                        String ans = gameCount(srno);                        int t1 = Integer.parseInt(ans);                        int t3 = Integer.parseInt(max);                        int t2 = (t3 * (t3 - 1)) / 2;                        if (t1 == t2) {                            Toast.makeText(getBaseContext(), "Looks like there are no images to compare!!!", Toast.LENGTH_SHORT).show();                            Game.re = null;                            finish();                        } else {                            getMaxId();                        }                    } catch (ExecutionException | InterruptedException e) {                        e.printStackTrace();                    }                }            }        }        GetMaxId g = new GetMaxId();        return g.execute(gender).get();    }    private String checkState() {        class CheckState extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String srno = strings[0];                String url = "http://192.168.43.89/phpmyadmin/checkState.php";                try {                    // Simulate network access.                    URL u = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) u.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("srno", "UTF-8") + "=" + URLEncoder.encode(srno, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line = "";                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    return response;                } catch (Exception e) {                }                return null;            }            @Override            protected void onPostExecute(String s) {                super.onPostExecute(s);            }        }        CheckState checkState = new CheckState();        String re = null;        try {            re = checkState.execute(srno).get();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }        return re;    }    private String checkCantorValue(int N1) {        String p = N1 + "";        class CheckCantorValue extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String p = strings[0];                String srno = strings[1];                String gender = strings[2];                String url = "http://192.168.43.89/phpmyadmin/checkCantorValue.php";                try {                    // Simulate network access.                    URL u = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) u.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("p", "UTF-8") + "=" + URLEncoder.encode(p, "UTF-8") + "&" +                            URLEncoder.encode("srno", "UTF-8") + "=" + URLEncoder.encode(srno, "UTF-8") + "&" +                            URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String response = "";                    String line;                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                    return response;                } catch (Exception e) {                }                return null;            }            @Override            protected void onPostExecute(String s) {                super.onPostExecute(s);            }        }        CheckCantorValue checkCantorValue = new CheckCantorValue();        String response = null;        try {            response = checkCantorValue.execute(p, srno, gender).get();        } catch (InterruptedException e) {            e.printStackTrace();        } catch (ExecutionException e) {            e.printStackTrace();        }        return response;    }    private void saveCantorValue(int n1, int n2, int i1, int j1) {        String N1 = n1 + "";        String N2 = n2 + "";        final String i = i1 + "";        final String j = j1 + "";        class SaveCantor extends AsyncTask<String, String, String> {            @Override            protected String doInBackground(String... strings) {                String srno = strings[2];                String N1 = strings[0];                String N2 = strings[1];                String gender = strings[3];                String response = "";                String url = "http://192.168.43.89/phpmyadmin/saveCantor.php";                try {                    URL add = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) add.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("srno", "UTF-8") + "=" + URLEncoder.encode(srno, "UTF-8") + "&" +                            URLEncoder.encode("N1", "UTF-8") + "=" + URLEncoder.encode(N1, "UTF-8") + "&" +                            URLEncoder.encode("N2", "UTF-8") + "=" + URLEncoder.encode(N2, "UTF-8") + "&" +                            URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    outputStream.close();                    InputStream inputStream = httpURLConnection.getInputStream();                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));                    String line;                    while ((line = bufferedReader.readLine()) != null) {                        response += line;                    }                    bufferedReader.close();                    inputStream.close();                    httpURLConnection.disconnect();                } catch (Exception e) {                    e.printStackTrace();                }                return response;            }            @Override            protected void onPostExecute(String s) {                super.onPostExecute(s);                getImage1(Integer.parseInt(i));                getImage2(Integer.parseInt(j));                Game.re = i + "," + j;                // Toast.makeText(getBaseContext(), Game.re, Toast.LENGTH_SHORT).show();            }        }        SaveCantor saveCantor = new SaveCantor();        saveCantor.execute(N1.trim(), N2.trim(), srno, gender, i, j);    }    private int cantorFuction(int i, int j) {        return ((i + j) * (i + j + 1)) / 2 + j;    }    private void getImage2(int j) {        class GetImage2 extends AsyncTask<String, String, Bitmap> {            ProgressDialog loading;            @Override            protected void onPostExecute(Bitmap bitmap) {                super.onPostExecute(bitmap);                loading.dismiss();                img4.setImageBitmap(bitmap);                if(flag1==0){                    img4.startAnimation(slidedown);flag1=1;                }            }            @Override            protected Bitmap doInBackground(String... strings) {                String no = strings[0].trim();                String gender = strings[1];                // String url = "http://192.168.43.89/phpmyadmin/getImage2.php";                String url = "http://192.168.43.89/phpmyadmin/downloadFromServer2.php";                Bitmap image = null;                try {                    URL add = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) add.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8") + "&" +                            URLEncoder.encode("no", "UTF-8") + "=" + URLEncoder.encode(no, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                 /*   BitmapFactory.Options options = new BitmapFactory.Options();                    options.inJustDecodeBounds = true;                    Rect r = new Rect(-1, -1, -1, -1);                    //image = BitmapFactory.decodeStream(httpURLConnection.getInputStream(),r,options);                    long totalImagePixels = options.outHeight * options.outWidth;                    long totalScreenPixels = 300 * 400;                    if (totalImagePixels > totalScreenPixels) {                        double factor = (float) totalImagePixels / (float) (totalScreenPixels);                        int sampleSize = (int) Math.pow(4, Math.floor(Math.sqrt(factor)));                        options.inJustDecodeBounds = false;                        options.inSampleSize = sampleSize;                        image = BitmapFactory.decodeStream(httpURLConnection.getInputStream(), r, options);                    } else {                        options.inJustDecodeBounds = false;                        image = BitmapFactory.decodeStream(httpURLConnection.getInputStream(), r, options);                    }*/                    Bitmap tempimage = BitmapFactory.decodeStream(httpURLConnection.getInputStream());                    image = resize(tempimage);                } catch (Exception e) {                    e.printStackTrace();                }                return image;            }            private Bitmap resize(Bitmap tempimage) {                int iwidth = tempimage.getWidth();                int iheight = tempimage.getHeight();                width = (width / 2 - 20);                double scale = iwidth / (iheight * (1.0));                Bitmap resized = Bitmap.createScaledBitmap(tempimage, (int) ((height - 20) * scale), (height - 20), true);                return resized;            }            @Override            protected void onPreExecute() {                super.onPreExecute();                loading = ProgressDialog.show(Game.this, "Uploading...", null, true, true);            }        }        GetImage2 gi = new GetImage2();        gi.execute(j + "", gender);    }    private void getImage1(int i) {        class GetImage1 extends AsyncTask<String, String, Bitmap> {            ProgressDialog loading;            @Override            protected void onPostExecute(Bitmap bitmap) {                super.onPostExecute(bitmap);                loading.dismiss();                img3.setImageBitmap(bitmap);                if(flag2==0){                    img3.startAnimation(slideup);flag2=1;                }            }            @Override            protected Bitmap doInBackground(String... strings) {                String no = strings[0].trim();                String gender = strings[1];                //  String url = "http://192.168.43.89/phpmyadmin/getImage1.php";                String url = "http://192.168.43.89/phpmyadmin/downloadFromServer1.php";                Bitmap image = null;                try {                  /*  URL add = new URL(url);                    image = BitmapFactory.decodeStream(add.openConnection().getInputStream());*/                    URL add = new URL(url);                    HttpURLConnection httpURLConnection = (HttpURLConnection) add.openConnection();                    httpURLConnection.setRequestMethod("POST");                    httpURLConnection.setDoOutput(true);                    httpURLConnection.setDoInput(true);                    OutputStream outputStream = httpURLConnection.getOutputStream();                    BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(outputStream, "UTF-8"));                    String data = URLEncoder.encode("gender", "UTF-8") + "=" + URLEncoder.encode(gender, "UTF-8") + "&" +                            URLEncoder.encode("no", "UTF-8") + "=" + URLEncoder.encode(no, "UTF-8");                    bufferedWriter.write(data);                    bufferedWriter.close();                    Bitmap tempimage = BitmapFactory.decodeStream(httpURLConnection.getInputStream());                    image = resize(tempimage);                } catch (Exception e) {                    e.printStackTrace();                }                return image;            }            private Bitmap resize(Bitmap image) {                int iwidth = image.getWidth();                int iheight = image.getHeight();                width = (width / 2 - 20);                double scale = iwidth / (iheight * (1.0));                Bitmap resized = Bitmap.createScaledBitmap(image, (int) ((height - 20) * scale), (height - 20), true);                return resized;            }            @Override            protected void onPreExecute() {                super.onPreExecute();                loading = ProgressDialog.show(Game.this, "Uploading...", null, true, true);            }        }        GetImage1 gi = new GetImage1();        gi.execute(i + "", gender);    }}